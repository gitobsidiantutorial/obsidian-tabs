/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class TabbedView extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = (yield this.loadData()) || new TabSettings();
            this.addSettingTab(new TabSettingTab(this.app, this));
            this.registerEvent(this.app.workspace.on('layout-change', this.handleTabs));
            this.registerEvent(this.app.workspace.on('active-leaf-change', this.handleOpen));
            this.updateStyle();
            this.refresh();
        });
    }
    ;
    removeStyle() {
        document.body.removeClass('rowoverflow', 'horizontal-to-vertical', 'hide-buttons', 'small-title', 'compact-title', 'tab-numbering', 'tab-underline');
        document.querySelector(':root').style.removeProperty('--headerheight');
        document.querySelector(':root').style.removeProperty('--jstabs');
        document.querySelector(':root').style.removeProperty('--rowsjs');
    }
    ;
    updateStyle() {
        this.removeStyle();
        document.body.classList.toggle('rowoverflow', this.settings.RowOverflow);
        document.body.classList.toggle('horizontal-to-vertical', this.settings.HorizontalToVertical);
        document.body.classList.toggle('hide-buttons', this.settings.HideButtons);
        document.body.classList.toggle('small-title', this.settings.SmallTitle);
        document.body.classList.toggle('compact-title', this.settings.CompactTitle);
        document.body.classList.toggle('tab-numbering', this.settings.TabNumbering);
        document.body.classList.toggle('tab-underline', this.settings.TabUnderline);
        document.querySelector(':root').style.setProperty('--headerheight', this.settings.HeaderHeight + 'px');
    }
    ;
    refresh() {
        // re-load the style
        this.updateStyle();
    }
    ;
    //remove class when plugin is disabled
    onunload() {
        this.removeStyle();
        let unloadCleaner = Array.from(document.querySelectorAll('.stayopen'));
        unloadCleaner.forEach(node => {
            node.removeClass('stayopen');
        });
    }
    ;
    handleOpen() {
        let removeopen = Array.from(app.workspace.activeLeaf.containerEl.parentNode.children); //remove class from siblings of active pane, but intentionally not from all 
        removeopen.forEach(node => {
            node.removeClass('stayopen');
        });
        app.workspace.activeLeaf.containerEl.addClass('stayopen');
    }
    ;
    handleTabs() {
        let opentabs1 = app.workspace.rootSplit.containerEl.children.length;
        let modverticalselector = app.workspace.rootSplit.containerEl.querySelector('.mod-vertical');
        if (modverticalselector !== null) {
            var opentabs2 = modverticalselector.children.length;
        }
        else {
            var opentabs2 = 0;
        }
        let tabwidth = Math.max(opentabs1, opentabs2) - 1;
        document.querySelector(':root').style.setProperty('--jstabs', tabwidth);
        if (tabwidth > 7) {
            document.querySelector(':root').style.setProperty('--rowsjs', 2);
        }
        else {
            document.querySelector(':root').style.removeProperty('--rowsjs');
        }
    }
    ;
}
class TabSettings {
    constructor() {
        this.RowOverflow = true;
        this.HorizontalToVertical = false;
        this.HideButtons = false;
        this.SmallTitle = false;
        this.CompactTitle = false;
        this.TabNumbering = false;
        this.HeaderHeight = 29;
    }
}
class TabSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h3', { text: 'Tabbed View Settings' });
        new obsidian.Setting(containerEl)
            .setName('Two Row Tab Overview')
            .setDesc('When sufficient tabs have been opened, display tabs in two rows.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.RowOverflow)
            .onChange((value) => {
            this.plugin.settings.RowOverflow = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('Tab Height')
            .setDesc('Sets the height of tabs and leaf headers (default 29).')
            .addText(text => text.setPlaceholder('29')
            .setValue((this.plugin.settings.HeaderHeight || '') + '')
            .onChange((value) => {
            this.plugin.settings.HeaderHeight = parseInt(value.trim());
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('Proper Horizontal Splits')
            .setDesc('Enable to make \'horizontal\' splits actually horizontal. Handy for resizing the tabbed split for side-by-side view.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.HorizontalToVertical)
            .onChange((value) => {
            this.plugin.settings.HorizontalToVertical = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('Show Tab Buttons')
            .setDesc('Enable to show tab buttons.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.HideButtons)
            .onChange((value) => {
            this.plugin.settings.HideButtons = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('Full Sized Title Text')
            .setDesc('Enable full sized title text.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.SmallTitle)
            .onChange((value) => {
            this.plugin.settings.SmallTitle = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('Full Tab Spacing.')
            .setDesc('Enable for default tab button spacing.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.CompactTitle)
            .onChange((value) => {
            this.plugin.settings.CompactTitle = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        containerEl.createEl('h4', { text: 'Pane Relief Specific Settings' });
        new obsidian.Setting(containerEl)
            .setName('Remove Tab Numbers')
            .setDesc('By default, tabs are numbered, for ease of use with Pane Relief.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.TabNumbering)
            .onChange((value) => {
            this.plugin.settings.TabNumbering = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
        new obsidian.Setting(containerEl)
            .setName('Remove Tab Underline')
            .setDesc('By default, the next tab is underlined, for ease of use with Pane Relief.')
            .addToggle(toggle => toggle.setValue(this.plugin.settings.TabUnderline)
            .onChange((value) => {
            this.plugin.settings.TabUnderline = value;
            this.plugin.saveData(this.plugin.settings);
            this.plugin.refresh();
        }));
    }
}

module.exports = TabbedView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
